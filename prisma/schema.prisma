datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String    @id @default(cuid())
    sessionToken String    @unique
    userId       String
    expires      DateTime
    userAgent    String?
    createdAt    DateTime? @default(now())
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Phase {
    MAINTAIN
    CUTTING
    BULKING
}

model User {
    id                    String             @id @default(cuid())
    name                  String?
    email                 String?            @unique
    emailVerified         DateTime?
    image                 String?
    hiddenOverviewColumns String[]
    orderOverviewColumns  String[]
    phase                 Phase              @default(MAINTAIN)
    accounts              Account[]
    sessions              Session[]
    measurements          Measurements[]
    nutritions            Nutrition[]
    workouts              Workouts[]
    activitySteps         ActivitySteps[]
    googleFitSettings     GoogleFitSetting[]
    additonal             Info[]
    habits                Habits[]
}

model GoogleFitSetting {
    id               String   @id @default(uuid())
    userId           String
    syncMeasurements Boolean  @default(false)
    syncSteps        Boolean  @default(false)
    syncWorkout      Boolean  @default(false)
    syncNutrition    Boolean  @default(false)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @default(now())
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Measurements {
    id                    String              @id @default(uuid())
    objectId              String              @unique
    measuredFormat        DateTime @db.Date            @unique
    measuredAt            DateTime
    weight                Float?
    bodyFat               Float?
    infoId                String
    userId                String
    info                  Info                @relation(fields: [infoId], references: [id])
    aditionalMeasurements AdditionalMeasures?
    user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdditionalMeasures {
    id           String       @id @default(uuid())
    objectId     String       @unique
    neck         Int?
    shoulders    Int?
    chest        Int?
    leftBicep    Int?
    rightBicep   Int?
    leftForearm  Int?
    rightForearm Int?
    upperAbs     Int?
    lowerAbs     Int?
    waist        Int?
    hips         Int?
    letfThigh    Int?
    rightThigh   Int?
    leftCalf     Int?
    rightCalf    Int?
    measuresId   String       @unique
    measures     Measurements @relation(fields: [measuresId], references: [id], onDelete: Cascade)
}

model Nutrition {
    id                 String   @id @default(uuid())
    objectId           String   @unique
    name               String
    amount             String?
    calories           Float?
    carbohydrates      Float?
    fat                Float?
    protein            Float?
    originDataSourceId String?
    category           String?
    measuredFormat     DateTime @db.Date
    measuredAt         DateTime
    synced              Boolean  @default(false)
    infoId             String?
    Info               Info?    @relation(fields: [infoId], references: [id])
    userId             String
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model Workouts {
    id               String   @id @default(uuid())
    objectId         String   @unique
    name             String
    duration         Float
    calories         Float?
    measuredAt       DateTime
    measuredFormat   DateTime @db.Date
    appName          String
    activityType     Int
    activityTypeName String
    userId           String
    infoId           String?
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    info             Info?    @relation(fields: [infoId], references: [id])
}

model ActivitySteps {
    id             String   @id @default(uuid())
    objectId       String   @unique
    steps          Float
    distance       Float?
    duration       Float?
    calories       Float?
    speed          Float?
    measuredFormat DateTime @db.Date
    userId         String
    infoId         String?
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    info           Info?    @relation(fields: [infoId], references: [id])
}

enum Mood {
    SUPER
    GOOD
    OK
    BAD
    TERRIBLE
}


model Info {
    id             String          @id @default(uuid())
    measuredFormat DateTime @db.Date        @unique
    phase          Phase?          @default(MAINTAIN)
    notes          String?
    userId         String
    mood           Mood?
    measurements   Measurements[]
    nutritions     Nutrition[]
    workouts       Workouts[]
    activitySteps  ActivitySteps[]
    completedHabits  CompletedHabits[]
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum HabitCategory {
    PHYSICAL_FITNESS
    MENTAL_HEALTH
    PERSONAL_DEVELOPMENT
    CAREER
    MONEY
    COMMUNICATION
    ROMANCE
    HOBBIES
    SUSTAINABILITY
    CREATIVITY
    TIME_MANAGEMENT
    STRESS_MANAGEMENT
    SELF_CARE
    HOME_ORGANIZATION
}

model Habits {
    id               String   @id @default(uuid())
    name             String
    emote            String?
    category         HabitCategory
    userId           String
    completedHabits           CompletedHabits[]
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompletedHabits {
    id               String   @id @default(uuid())
    completedAt      DateTime
    habitId          String
    infoId           String?
    habit            Habits   @relation(fields: [habitId], references: [id], onDelete: Cascade)
    info             Info?    @relation(fields: [infoId], references: [id])
}
